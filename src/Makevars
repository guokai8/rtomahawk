# ################################################################
# Copyright (C) 2016-present Genome Research Ltd.
# Author: Marcus D. R. Klarqvist <mk819@cam.ac.uk>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
# ################################################################

# R C/C++ sources to build.
CXX_SOURCE := $(wildcard *.cpp)
C_SOURCE   := 

# Compiler flags for objects used within R.
OPTFLAGS      = -msse4.2
CXXFLAGS      = -std=c++0x
CFLAGS        = -std=c99
CFLAGS_VENDOR = -std=c99

RCPP_CXXFLAGS := $(shell echo `$(R_HOME)/bin/Rscript -e "Rcpp:::CxxFlags()"`)
RCPP_LDFLAGS := $(shell echo `$(R_HOME)/bin/Rscript -e "Rcpp:::LdFlags()"`)
R_PATH := $(shell echo `$(R_HOME)/bin/Rscript -e "cat(R.home('include'))"`)

PKG_CPPFLAGS := $(RCPP_CXXFLAGS) -I$(R_PATH) -I$(abspath ./tomahawk/include)
PKG_LIBS     := $(RCPP_LDFLAGS) '-Wl,-rpath,$$ORIGIN/,-rpath,$$ORIGIN/../usrlib${R_ARCH},-rpath,$$ORIGIN/../libs' -ltomahawk
ifeq ($(shell uname), Darwin)
# -dynamiclib is added by R
PKG_LIBS +=  -install_name "@rpath/rtomahawk.so"
endif

OBJECTS  = $(CXX_SOURCE:.cpp=.o) $(C_SOURCE:.c=.o)
CPP_DEPS = $(CXX_SOURCE:.cpp=.d) $(C_SOURCE:.c=.d)

# Determine zstd version numbers
ZSTD_LIBVER_MAJOR_SCRIPT:=`sed -n '/define ZSTD_VERSION_MAJOR/s/.*[[:blank:]]\([0-9][0-9]*\).*/\1/p' < ./zstd/lib/zstd.h`
ZSTD_LIBVER_MINOR_SCRIPT:=`sed -n '/define ZSTD_VERSION_MINOR/s/.*[[:blank:]]\([0-9][0-9]*\).*/\1/p' < ./zstd/lib/zstd.h`
ZSTD_LIBVER_PATCH_SCRIPT:=`sed -n '/define ZSTD_VERSION_RELEASE/s/.*[[:blank:]]\([0-9][0-9]*\).*/\1/p' < ./zstd/lib/zstd.h`
ZSTD_LIBVER_SCRIPT:= $(ZSTD_LIBVER_MAJOR_SCRIPT).$(ZSTD_LIBVER_MINOR_SCRIPT).$(ZSTD_LIBVER_PATCH_SCRIPT)
ZSTD_LIBVER_SCRIPT:= $(ZSTD_LIBVER_MAJOR_SCRIPT).$(ZSTD_LIBVER_MINOR_SCRIPT).$(ZSTD_LIBVER_PATCH_SCRIPT)
ZSTD_LIBVER_MAJOR := $(shell echo $(ZSTD_LIBVER_MAJOR_SCRIPT))
ZSTD_LIBVER_MINOR := $(shell echo $(ZSTD_LIBVER_MINOR_SCRIPT))
ZSTD_LIBVER_PATCH := $(shell echo $(ZSTD_LIBVER_PATCH_SCRIPT))
ZSTD_LIBVER       := $(shell echo $(ZSTD_LIBVER_SCRIPT))

# Determine twk version numbers
TWK_LIBVER_MAJOR_SCRIPT:=`sed -n '/const int32_t TOMAHAWK_VERSION_MAJOR = /s/.*[[:blank:]]\([0-9][0-9]*\).*/\1/p' < ./tomahawk/include/tomahawk.h`
TWK_LIBVER_MINOR_SCRIPT:=`sed -n '/const int32_t TOMAHAWK_VERSION_MINOR = /s/.*[[:blank:]]\([0-9][0-9]*\).*/\1/p' < ./tomahawk/include/tomahawk.h`
TWK_LIBVER_PATCH_SCRIPT:=`sed -n '/const int32_t TOMAHAWK_VERSION_PATCH = /s/.*[[:blank:]]\([0-9][0-9]*\).*/\1/p' < ./tomahawk/include/tomahawk.h`
TWK_LIBVER_SCRIPT:= $(TWK_LIBVER_MAJOR_SCRIPT).$(TWK_LIBVER_MINOR_SCRIPT).$(TWK_LIBVER_PATCH_SCRIPT)
TWK_LIBVER_SCRIPT:= $(TWK_LIBVER_MAJOR_SCRIPT).$(TWK_LIBVER_MINOR_SCRIPT).$(TWK_LIBVER_PATCH_SCRIPT)
TWK_LIBVER_MAJOR := $(shell echo $(TWK_LIBVER_MAJOR_SCRIPT))
TWK_LIBVER_MINOR := $(shell echo $(TWK_LIBVER_MINOR_SCRIPT))
TWK_LIBVER_PATCH := $(shell echo $(TWK_LIBVER_PATCH_SCRIPT))
TWK_LIBVER       := $(shell echo $(TWK_LIBVER_SCRIPT))

ifneq ($(shell uname), Darwin)
SHARED_EXT = so
else
SHARED_EXT = dylib
endif

.PHONY: all zstd htslib twk clean paths

all: paths $(OBJECTS)
ifeq ($(shell uname),Darwin)
	install_name_tool -change libtomahawk.$(SHARED_EXT) ${R_PACKAGE_DIR}/usrlib${R_ARCH}/libtomahawk.$(SHARED_EXT) rtomahawk.so	
endif

%.o: %.cpp
	$(CXX) -std=c++0x $(OPTFLAGS) $(PKG_CPPFLAGS) -fpic -c -o $@ $<
	
zstd:
	cd zstd && $(MAKE) CC="${CC}" CXX="${CXX}" default && cd ..

htslib:
	cd htslib && autoheader && autoconf && ./configure && $(MAKE) CC="${CC}" CXX="${CXX}" && cd ..

twk: zstd htslib
	cd tomahawk && $(MAKE) CC="${CC}" CXX="${CXX}" library library=true origin=true && cd ..
	
paths: twk
	mkdir -p "${R_PACKAGE_DIR}/usrlib${R_ARCH}"
	mkdir -p "${R_PACKAGE_DIR}/libs${R_ARCH}"
	mkdir -p "${R_PACKAGE_DIR}/include/htslib"
	mkdir -p "${R_PACKAGE_DIR}/include/zstd"
	mkdir -p "${R_PACKAGE_DIR}/include/tomahawk"
	cp -d tomahawk/libtomahawk.* .
	cp -a htslib/libhts.* .
	cp -a zstd/lib/libzstd.* .
	cp -a {*.$(SHARED_EXT),*.$(SHARED_EXT).*} "${R_PACKAGE_DIR}/usrlib${R_ARCH}"
	cp -a {*.$(SHARED_EXT),*.$(SHARED_EXT).*} "${R_PACKAGE_DIR}/libs${R_ARCH}"
	cp htslib/htslib/*.h "${R_PACKAGE_DIR}/include/htslib"
	cp zstd/lib/zstd.h "${R_PACKAGE_DIR}/include/zstd"
	cp zstd/lib/dictBuilder/zdict.h "${R_PACKAGE_DIR}/include/zstd"
	cp zstd/lib/deprecated/zbuff.h "${R_PACKAGE_DIR}/include/zstd"
	cp zstd/lib/common/zstd_errors.h "${R_PACKAGE_DIR}/include/zstd"
	cp tomahawk/include/*.h "${R_PACKAGE_DIR}/include/tomahawk"

clean:
	rm -f *.$(SHARED_EXT) *.$(SHARED_EXT).* $(OBJECTS) $(CPP_DEPS) $(SHLIB) rtomahawk.so
	cd zstd && make clean && cd ..
	cd htslib && make clean && cd ..
	cd tomahawk && make clean && cd ..